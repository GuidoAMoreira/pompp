{
    "type": [
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        3,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2
    ],
    "data": [
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "|\n",
        "MCMC sampling complete.\ndebug at /Users/anthorg/Documents/pompp/R/pompp.R#213: mcmcRun[[c]] <- do.call(cbind, temp[-length(temp)])\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#214: colnames(mcmcRun[[c]]) <- parnames\n",
        "Browse[2]> ",
        "colnames(mcmcRun[[c]])",
        " [1] \"\"                   \"\"                   \"\"                   \"\"                  \n [5] \"\"                   \"lambda\"             \"mu\"                 \"nugget\"            \n [9] \"nU\"                 \"nXp\"                \"marksPrimeSum\"      \"marksPrimeVariance\"\n[13] \"allMarksSum\"        \"allMarksVariance\"  \n",
        "Browse[2]> ",
        "parnames",
        " [1] \"beta_0\"              \"beta_1\"              \"delta_0\"            \n [4] \"delta_1\"             \"gamma\"               \"lambdaStar\"         \n [7] \"marksMean\"           \"marksNugget\"         \"n_U\"                \n[10] \"n_Xprime\"            \"sumLatentMarks\"      \"varianceLatentMarks\"\n",
        "Browse[2]> ",
        "",
        "Error in dimnames(x) <- dn : \n  length of 'dimnames' [2] not equal to array extent\n",
        "> ",
        "undebug(fit_pompp, signature = methods::signature(object = \"pompp_model\",",
        "+ ",
        "                                                background = \"matrix\"))",
        "Untracing specified method for function \"fit_pompp\" in environment\n<namespace:pompp>\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(pompp)",
        "> ",
        "fit <- fit_pompp(model, bkg, neighborhoodSize = 20, area = 1,",
        "+ ",
        "                 mcmc_setup = list(burnin = 10, iter = 20))",
        "Preparing model parameters.\nStarting chain 1.\nWarming up the Markov Chain.\n",
        "0%   10   20   30   40   50   60   70   80   90   100%\n",
        "[----|----|----|----|----|----|----|----|----|----|\n",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "|\n",
        "Warm up complete. Sampling MCMC.\n",
        "0%   10   20   30   40   50   60   70   80   90   100%\n",
        "[----|----|----|----|----|----|----|----|----|----|\n",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "|\n",
        "MCMC sampling complete.\n",
        "Error in (ncol(mcmcRun) - 2):ncol(mcmcRun) : argument of length 0\n",
        "> ",
        "debug(fit_pompp, signature = methods::signature(object = \"pompp_model\",",
        "+ ",
        "                                                background = \"matrix\"))",
        "Tracing specified method for function \"fit_pompp\" in environment\n<namespace:pompp>\n",
        "> ",
        "fit <- fit_pompp(model, bkg, neighborhoodSize = 20, area = 1,",
        "+ ",
        "                 mcmc_setup = list(burnin = 10, iter = 20))",
        "Tracing function \".local\" in package \"pompp\"\n",
        "Tracing .local(object, background, mcmc_setup, verbose, ...) step 2 \nCalled from: eval(expr, p)\n",
        "Browse[1]> ",
        "n",
        "debug: backConfig <- checkFormatBackground(object, background)\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#116: s <- function(n) methods::slot(object, n)\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#119: stopifnot(length(area) == 1, area > 0)\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#121: stopifnot(is.list(mcmc_setup))\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#122: if (is.null(mcmc_setup$burnin)) mcmc_setup$burnin <- 0\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#123: if (is.null(mcmc_setup$thin)) mcmc_setup$thin <- 1\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#123: mcmc_setup$thin <- 1\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#124: mcmc_setup$burnin <- as.numeric(mcmc_setup$burnin)\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#125: mcmc_setup$thin <- as.numeric(mcmc_setup$thin)\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#126: mcmc_setup$iter <- as.numeric(mcmc_setup$iter)\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#127: stopifnot(\"iter\" %in% names(mcmc_setup), !is.na(mcmc_setup$burnin), \n    length(mcmc_setup$burnin) == 1, mcmc_setup$burnin == floor(mcmc_setup$burnin), \n    mcmc_setup$burnin >= 0, !is.na(mcmc_setup$thin), length(mcmc_setup$thin) == \n        1, mcmc_setup$thin == floor(mcmc_setup$thin), mcmc_setup$thin > \n        0, !is.na(mcmc_setup$iter), length(mcmc_setup$iter) == \n        1, mcmc_setup$iter == floor(mcmc_setup$iter), mcmc_setup$iter > \n        0, mcmc_setup$iter >= mcmc_setup$thin, cores > 0, cores == \n",
        "        floor(cores), length(cores) == 1, cores <= parallel::detectCores())\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#139: nb <- length(s(\"intensitySelection\")) + 1\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#140: nd <- length(s(\"observabilitySelection\")) + 1\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#141: npar <- nb + nd + 8 - 1\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#142: chains <- length(s(\"init\"))\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#145: if (length(s(\"iSelectedColumns\") > 0)) betanames <- c(\"(Intensity intercept)\", \n    s(\"iSelectedColumns\")) else betanames = paste0(\"beta_\", 1:nb - \n    1)\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#145: betanames = paste0(\"beta_\", 1:nb - 1)\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#149: if (length(s(\"oSelectedColumns\") > 0)) deltanames <- c(\"(Observability intercept)\", \n    s(\"oSelectedColumns\")) else deltanames = paste0(\"delta_\", \n    1:nd - 1)\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#149: deltanames = paste0(\"delta_\", 1:nd - 1)\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#153: deltanames <- c(deltanames, \"gamma\")\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#154: parnames <- c(betanames, deltanames, \"lambdaStar\", \"marksMean\", \n    \"marksNugget\", \"n_U\", \"n_Xprime\", \"sumLatentMarks\", \"varianceLatentMarks\")\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#162: cat(\"Preparing model parameters.\\n\")\n",
        "Browse[2]> ",
        "",
        "Preparing model parameters.\ndebug at /Users/anthorg/Documents/pompp/R/pompp.R#163: fitted <- geoR::likfit(geoR::as.geodata(s(\"po\")[, c(s(\"coordinates\"), \n    s(\"marksSelection\"))]), lambda = 0, ini.cov.pars = c(1, 1), \n    cov.model = \"exponential\", fix.nugget = FALSE, messages = FALSE)\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#171: time <- Sys.time()\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#172: mcmcRun <- list()\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#173: heatMap <- rep(0, nrow(background))\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#174: for (c in 1:chains) {\n    if (chains > 1 && verbose) \n        cat(\"Starting chain \", c, \".\\n\", sep = \"\")\n    temp <- cppPOMPP(methods::slot(s(\"init\")[[c]], \"beta\"), methods::slot(s(\"init\")[[c]], \n        \"delta\"), methods::slot(s(\"init\")[[c]], \"lambdaStar\"), \n        \"\", \"\", \"\", retrievePars(methods::slot(s(\"prior\"), \"beta\")), \n        retrievePars(methods::slot(s(\"prior\"), \"delta\")), methods::slot(s(\"prior\"), \n            \"lambdaStar\")$shape, methods::slot(s(\"prior\"), \"lambdaStar\")$rate, \n",
        "        \"\", background, area, \"\", methods::slot(s(\"init\")[[c]], \n            \"marksMean\"), methods::slot(s(\"init\")[[c]], \"marksPrecision\"), \n        methods::slot(s(\"prior\"), \"marksMean\")$mu, methods::slot(s(\"prior\"), \n            \"marksMean\")$Sigma, methods::slot(s(\"prior\"), \"marksPrecision\")$shape, \n        methods::slot(s(\"prior\"), \"marksPrecision\")$rate, s(\"po\"), \n        s(\"po\")[, s(\"marksSelection\")], s(\"po\")[, s(\"coordinates\")], \n        backConfig$bIS - 1, backConfig$bOS - 1, s(\"intensitySelection\") - \n",
        "            1, s(\"observabilitySelection\") - 1, 1, fitted$sigmasq, \n        fitted$phi, neighborhoodSize, s(\"coordinates\")[1], s(\"coordinates\")[2], \n        mcmc_setup$burnin, mcmc_setup$thin, mcmc_setup$iter, \n        cores, verbose)\n    mcmcRun[[c]] <- do.call(cbind, temp[-length(temp)])\n    colnames(mcmcRun[[c]])[-((ncol(mcmcRun) - 2):ncol(mcmcRun))] <- parnames\n    mcmcRun[[c]] <- coda::mcmc(mcmcRun[[c]], thin = mcmc_setup$thin)\n    if (chains > 1) \n        cat(\"Finished chain \", c, \".\\n\\n\", sep = \"\")\n}\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#175: if (chains > 1 && verbose) cat(\"Starting chain \", c, \".\\n\", sep = \"\")\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#175: cat(\"Starting chain \", c, \".\\n\", sep = \"\")\n",
        "Browse[2]> ",
        "",
        "Starting chain 1.\ndebug at /Users/anthorg/Documents/pompp/R/pompp.R#176: temp <- cppPOMPP(methods::slot(s(\"init\")[[c]], \"beta\"), methods::slot(s(\"init\")[[c]], \n    \"delta\"), methods::slot(s(\"init\")[[c]], \"lambdaStar\"), \"\", \n    \"\", \"\", retrievePars(methods::slot(s(\"prior\"), \"beta\")), \n    retrievePars(methods::slot(s(\"prior\"), \"delta\")), methods::slot(s(\"prior\"), \n        \"lambdaStar\")$shape, methods::slot(s(\"prior\"), \"lambdaStar\")$rate, \n    \"\", background, area, \"\", methods::slot(s(\"init\")[[c]], \"marksMean\"), \n",
        "    methods::slot(s(\"init\")[[c]], \"marksPrecision\"), methods::slot(s(\"prior\"), \n        \"marksMean\")$mu, methods::slot(s(\"prior\"), \"marksMean\")$Sigma, \n    methods::slot(s(\"prior\"), \"marksPrecision\")$shape, methods::slot(s(\"prior\"), \n        \"marksPrecision\")$rate, s(\"po\"), s(\"po\")[, s(\"marksSelection\")], \n    s(\"po\")[, s(\"coordinates\")], backConfig$bIS - 1, backConfig$bOS - \n        1, s(\"intensitySelection\") - 1, s(\"observabilitySelection\") - \n        1, 1, fitted$sigmasq, fitted$phi, neighborhoodSize, s(\"coordinates\")[1], \n",
        "    s(\"coordinates\")[2], mcmc_setup$burnin, mcmc_setup$thin, \n    mcmc_setup$iter, cores, verbose)\n",
        "Browse[2]> ",
        "",
        "Warming up the Markov Chain.\n",
        "0%   10   20   30   40   50   60   70   80   90   100%\n",
        "[----|----|----|----|----|----|----|----|----|----|\n",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "|\n",
        "Warm up complete. Sampling MCMC.\n",
        "0%   10   20   30   40   50   60   70   80   90   100%\n",
        "[----|----|----|----|----|----|----|----|----|----|\n",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "|\n",
        "MCMC sampling complete.\ndebug at /Users/anthorg/Documents/pompp/R/pompp.R#213: mcmcRun[[c]] <- do.call(cbind, temp[-length(temp)])\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/pompp.R#214: colnames(mcmcRun[[c]])[-((ncol(mcmcRun) - 2):ncol(mcmcRun))] <- parnames\n",
        "Browse[2]> ",
        "ncol(mcmcRun)",
        "NULL\n",
        "Browse[2]> ",
        "",
        "Error in (ncol(mcmcRun) - 2):ncol(mcmcRun) : argument of length 0\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(pompp)",
        "> ",
        "fit <- fit_pompp(model, bkg, neighborhoodSize = 20, area = 1,",
        "+ ",
        "                 mcmc_setup = list(burnin = 10, iter = 20))",
        "Preparing model parameters.\nStarting chain 1.\nWarming up the Markov Chain.\n",
        "0%   10   20   30   40   50   60   70   80   90   100%\n",
        "[----|----|----|----|----|----|----|----|----|----|\n",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "|\n",
        "Warm up complete. Sampling MCMC.\n",
        "0%   10   20   30   40   50   60   70   80   90   100%\n",
        "[----|----|----|----|----|----|----|----|----|----|\n",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "|\n",
        "MCMC sampling complete.\nFinished chain 1.\n\nStarting chain 2.\nWarming up the Markov Chain.\n",
        "0%   10   20   30   40   50   60   70   80   90   100%\n",
        "[----|----|----|----|----|----|----|----|----|----|\n",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "|\n",
        "Warm up complete. Sampling MCMC.\n",
        "0%   10   20   30   40   50   60   70   80   90   100%\n",
        "[----|----|----|----|----|----|----|----|----|----|\n",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "|\n",
        "MCMC sampling complete.\nFinished chain 2.\n\nTotal computation time: 37 secs.\n",
        "Error in initialize(value, ...) : \n  invalid name for slot of class “pompp_fit”: heatMap\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(pompp)",
        "> ",
        "fit <- fit_pompp(model, bkg, neighborhoodSize = 20, area = 1,",
        "+ ",
        "                 mcmc_setup = list(burnin = 10, iter = 20))",
        "Preparing model parameters.\nStarting chain 1.\nWarming up the Markov Chain.\n",
        "0%   10   20   30   40   50   60   70   80   90   100%\n",
        "[----|----|----|----|----|----|----|----|----|----|\n",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "|\n",
        "Warm up complete. Sampling MCMC.\n",
        "0%   10   20   30   40   50   60   70   80   90   100%\n",
        "[----|----|----|----|----|----|----|----|----|----|\n",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "|\n",
        "MCMC sampling complete.\nFinished chain 1.\n\nStarting chain 2.\nWarming up the Markov Chain.\n",
        "0%   10   20   30   40   50   60   70   80   90   100%\n",
        "[----|----|----|----|----|----|----|----|----|----|\n",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "|\n",
        "Warm up complete. Sampling MCMC.\n",
        "0%   10   20   30   40   50   60   70   80   90   100%\n",
        "[----|----|----|----|----|----|----|----|----|----|\n",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "*",
        "|\n",
        "MCMC sampling complete.\nFinished chain 2.\n\nTotal computation time: 34 secs.\n",
        "> ",
        "summary(fit)",
        "                   mean      median          sd        2.5%       97.5% eff. sample size\nbeta_0        4.7145023   4.6814935   0.5851942   3.7899490   5.4966632         5.399840\nbeta_1        0.4042270   0.4072030   1.3993292  -1.4909726   2.0534920         4.565734\ndelta_0      -6.4005617  -6.2339860   1.4804107  -8.3374690  -4.3504170        10.230344\ndelta_1       0.4593121   0.4113129   0.2140212   0.1861958   0.9703207        10.431918\ngamma         3.4190655   3.3301300   1.2727433   1.7516398   5.1671019",
        "         7.462291\nlambdaStar  596.9819240 574.3400234 185.1215581 270.4852847 905.3184926         3.493300\nmarksMean     1.3353540   1.2775724   1.5196955  -0.2509451   3.0248601         6.187731\nmarksNugget   0.4544207   0.3886825   0.1638959   0.2501551   0.9184249        23.311873\nn_U          81.5500000  35.0000000  89.4831169   0.0000000 247.0250000         7.992360\n            Estimated Rhat Upper CI Rhat\nbeta_0            4.795182     13.163584\nbeta_1           18.810444     66.671586\ndelta_0           8.665590",
        "     20.312178\ndelta_1           2.156543      6.116565\ngamma            10.728094     26.429478\nlambdaStar        1.131116      1.583833\nmarksMean        64.288515    182.116226\nmarksNugget       1.186665      1.275988\nn_U              12.533686     76.317622\n",
        "> ",
        "fit",
        "Fit of a pompp model.\nPresence-only dataset size: 36 \n\n1  intensity covariates selected. Columns:  1 \n1  observability covariates selected. Columns:  2 \nMarks column:  5 \n\nLink functions chosen:\n    intensity observability \n      \"logit\"       \"logit\" \n\nPrior selection:\nJoint prior for a pompp model. Individual components:\n\nBeta:\nNormal prior\n\nMu mean vector:\n[1] 0 0\nSigma covariance matrix:\n10 * I, where I is an identity matrix.\n\nDelta:\nNormal prior\n\nMu mean vector:\n[1] 0 0 0\nSigma covariance matrix:\n10 * I, where I is an identity matrix.\n",
        "\nlambdaStar:\nGamma prior\n\nshape  rate \n1e-05 1e-05 \n\nMarks mean:\nNormal prior\n\nMu mean vector:\n[1] 0\nSigma covariance matrix:\n",
        "Error in s - diag(diag(s)) : non-conformable arrays\n",
        "> ",
        "jointPrior",
        "Joint prior for a pompp model. Individual components:\n\nBeta:\nNormal prior\n\nMu mean vector:\n[1] 0 0\nSigma covariance matrix:\n10 * I, where I is an identity matrix.\n\nDelta:\nNormal prior\n\nMu mean vector:\n[1] 0 0 0\nSigma covariance matrix:\n10 * I, where I is an identity matrix.\n\nlambdaStar:\nGamma prior\n\nshape  rate \n1e-05 1e-05 \n\nMarks mean:\nNormal prior\n\nMu mean vector:\n[1] 0\nSigma covariance matrix:\n",
        "Error in s - diag(diag(s)) : non-conformable arrays\n",
        "> ",
        "diag(diag)(3)",
        "Error in as.integer(x) : \n  cannot coerce type 'closure' to vector of type 'integer'\n",
        "> ",
        "diag(diag(3))",
        "[1] 1 1 1\n\nRestarting R session...\n\n",
        "> ",
        "library(pompp)",
        "> ",
        "fit",
        "Fit of a pompp model.\nPresence-only dataset size: 36 \n\n1  intensity covariates selected. Columns:  1 \n1  observability covariates selected. Columns:  2 \nMarks column:  5 \n\nLink functions chosen:\n    intensity observability \n      \"logit\"       \"logit\" \n\nPrior selection:\nJoint prior for a pompp model. Individual components:\n\nBeta:\nNormal prior\n\nMu mean vector:\n[1] 0 0\nSigma covariance matrix:\n10 * I, where I is an identity matrix.\n\nDelta:\nNormal prior\n\nMu mean vector:\n[1] 0 0 0\nSigma covariance matrix:\n10 * I, where I is an identity matrix.\n",
        "\nlambdaStar:\nGamma prior\n\nshape  rate \n1e-05 1e-05 \n\nMarks mean:\nNormal prior\n\nMu mean vector:\n[1] 0\nSigma covariance matrix:\n     [,1]\n[1,]  100\n\nMarks precision:\nGamma prior\n\nshape  rate \n0.001 0.001 \n\n2 chains of MCMC were configured with 10 warmup iterations and 20 valid iterations, storing one in every step.\n\n               mean  median      sd    2.5%   97.5% eff. sample size Estimated Rhat\nbeta_0        4.715   4.681   0.585   3.790   5.497            5.400          4.795\nbeta_1        0.404   0.407   1.399",
        "  -1.491   2.053            4.566         18.810\ndelta_0      -6.401  -6.234   1.480  -8.337  -4.350           10.230          8.666\ndelta_1       0.459   0.411   0.214   0.186   0.970           10.432          2.157\ngamma         3.419   3.330   1.273   1.752   5.167            7.462         10.728\nlambdaStar  596.982 574.340 185.122 270.485 905.318            3.493          1.131\nmarksMean     1.335   1.278   1.520  -0.251   3.025            6.188         64.289\nmarksNugget   0.454   0.389   0.164   0.250",
        "   0.918           23.312          1.187\nn_U          81.550  35.000  89.483   0.000 247.025            7.992         12.534\n            Upper CI Rhat\nbeta_0             13.164\nbeta_1             66.672\ndelta_0            20.312\ndelta_1             6.117\ngamma              26.429\nlambdaStar          1.584\nmarksMean         182.116\nmarksNugget         1.276\nn_U                76.318\n\nThe effective sample size represents the sample size of an independent sample which would yield equivalent estimates as the autocorrelated",
        " MCMC result.\nRhat has been calculated from multiple chains. Lower, closer to 1 values indicate better convergence of the chain. For posterior estimates to be trusted, the upper CI limit should be below 1.1. If they are not, run more iterations. See help('fit_pompp') to see how to do utilize the iterations already run.\n\n",
        "> ",
        "bayesplot::mcmc_trace(fit)",
        "Error in array(chains, dim = c(iterations, nchains, npar), dimnames = list(iterations = NULL,  : \n  length of 'dimnames' [3] not equal to array extent\n",
        "> ",
        "fit$mcmc_chains %>% dim",
        "Error in fit$mcmc_chains %>% dim : could not find function \"%>%\"\n",
        "> ",
        "dim(fit$mcmc_chains)",
        "NULL\n",
        "> ",
        "length(fit$mcmc_chains)",
        "[1] 2\n",
        "> ",
        "dim(fit$mcmc_chains[[1]])",
        "[1] 20 14\n\nRestarting R session...\n\n",
        "> ",
        "library(pompp)",
        "> ",
        "fit",
        "Fit of a pompp model.\nPresence-only dataset size: 36 \n\n1  intensity covariates selected. Columns:  1 \n1  observability covariates selected. Columns:  2 \nMarks column:  5 \n\nLink functions chosen:\n    intensity observability \n      \"logit\"       \"logit\" \n\nPrior selection:\nJoint prior for a pompp model. Individual components:\n\nBeta:\nNormal prior\n\nMu mean vector:\n[1] 0 0\nSigma covariance matrix:\n10 * I, where I is an identity matrix.\n\nDelta:\nNormal prior\n\nMu mean vector:\n[1] 0 0 0\nSigma covariance matrix:\n10 * I, where I is an identity matrix.\n",
        "\nlambdaStar:\nGamma prior\n\nshape  rate \n1e-05 1e-05 \n\nMarks mean:\nNormal prior\n\nMu mean vector:\n[1] 0\nSigma covariance matrix:\n     [,1]\n[1,]  100\n\nMarks precision:\nGamma prior\n\nshape  rate \n0.001 0.001 \n\n2 chains of MCMC were configured with 10 warmup iterations and 20 valid iterations, storing one in every step.\n\n                        mean   median       sd    2.5%     97.5% eff. sample size\nbeta_0                 4.715    4.681    0.585   3.790     5.497            5.400\nbeta_1                 0.404    0.407",
        "    1.399  -1.491     2.053            4.566\ndelta_0               -6.401   -6.234    1.480  -8.337    -4.350           10.230\ndelta_1                0.459    0.411    0.214   0.186     0.970           10.432\ngamma                  3.419    3.330    1.273   1.752     5.167            7.462\nlambdaStar           596.982  574.340  185.122 270.485   905.318            3.493\nmarksMean              1.335    1.278    1.520  -0.251     3.025            6.188\nmarksNugget            0.454    0.389    0.164   0.250     0.918",
        "           23.312\nn_U                   81.550   35.000   89.483   0.000   247.025            7.992\nn_Xprime             475.500  467.000  171.332 185.750   796.175            3.570\nsumLatentMarks      6389.167 3710.514 6230.284 307.859 18218.259            5.168\nvarianceLatentMarks  747.182  230.439 1281.629   1.113  3522.377           40.000\n                    Estimated Rhat Upper CI Rhat\nbeta_0                       4.795        13.164\nbeta_1                      18.810        66.672\ndelta_0            ",
        "          8.666        20.312\ndelta_1                      2.157         6.117\ngamma                       10.728        26.429\nlambdaStar                   1.131         1.584\nmarksMean                   64.289       182.116\nmarksNugget                  1.187         1.276\nn_U                         12.534        76.318\nn_Xprime                     2.176         4.242\nsumLatentMarks               8.678        51.990\nvarianceLatentMarks          4.326        25.617\n\nThe effective sample size represents the sample size of an independent",
        " sample which would yield equivalent estimates as the autocorrelated MCMC result.\nRhat has been calculated from multiple chains. Lower, closer to 1 values indicate better convergence of the chain. For posterior estimates to be trusted, the upper CI limit should be below 1.1. If they are not, run more iterations. See help('fit_pompp') to see how to do utilize the iterations already run.\n\n",
        "> ",
        "bayesplot::mcmc_trace(fit)",
        "Error in array(chains, dim = c(iterations, nchains, npar), dimnames = list(iterations = NULL,  : \n  length of 'dimnames' [3] not equal to array extent\n",
        "> ",
        "debug(as.array.pomp_fit)",
        "Error in debug(as.array.pomp_fit) : object 'as.array.pomp_fit' not found\n",
        "> ",
        "debug(pompp:::as.array.pomp_fit)",
        "Error in debug(pompp:::as.array.pomp_fit) : \n  object 'as.array.pomp_fit' not found\n",
        "> ",
        "debug(pompp::as.array.pomp_fit)",
        "Error: 'as.array.pomp_fit' is not an exported object from 'namespace:pompp'\n",
        "> ",
        "debug(pompp:::as.array.pompp_fit)",
        "> ",
        "bayesplot::mcmc_trace(fit)",
        "debugging in: as.array.pompp_fit(x)\ndebug at /Users/anthorg/Documents/pompp/R/fit-class.R#294: {\n    nchains <- length(methods::slot(x, \"fit\"))\n    chains <- do.call(rbind, methods::slot(x, \"fit\"))\n    chains <- chains[, -((ncol(chains) - 2):ncol(chains))]\n    iterations <- nrow(methods::slot(x, \"fit\")[[1]])\n    npar <- ncol(chains)\n    parnames <- methods::slot(x, \"parnames\")\n    return(array(chains, dim = c(iterations, nchains, npar), \n        dimnames = list(iterations = NULL, chains = paste0(\"chain:\", \n",
        "            1:nchains), parameters = namesAid(parnames[1:(length(parnames) - \n            2)]))))\n}\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/fit-class.R#295: nchains <- length(methods::slot(x, \"fit\"))\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/fit-class.R#296: chains <- do.call(rbind, methods::slot(x, \"fit\"))\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/fit-class.R#297: chains <- chains[, -((ncol(chains) - 2):ncol(chains))]\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/fit-class.R#298: iterations <- nrow(methods::slot(x, \"fit\")[[1]])\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/fit-class.R#299: npar <- ncol(chains)\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/fit-class.R#302: parnames <- methods::slot(x, \"parnames\")\n",
        "Browse[2]> ",
        "",
        "debug at /Users/anthorg/Documents/pompp/R/fit-class.R#303: return(array(chains, dim = c(iterations, nchains, npar), dimnames = list(iterations = NULL, \n    chains = paste0(\"chain:\", 1:nchains), parameters = namesAid(parnames[1:(length(parnames) - \n        2)]))))\n",
        "Browse[2]> ",
        "parnames",
        " [1] \"beta_0\"              \"beta_1\"              \"delta_0\"            \n [4] \"delta_1\"             \"gamma\"               \"lambdaStar\"         \n [7] \"marksMean\"           \"marksNugget\"         \"n_U\"                \n[10] \"n_Xprime\"            \"sumLatentMarks\"      \"varianceLatentMarks\"\n[13] \"allMarksSum\"         \"allMarksVariance\"   \n",
        "Browse[2]> ",
        "namesAid(parnames)",
        " [1] \"beta_0\"              \"beta_1\"              \"delta_0\"            \n [4] \"delta_1\"             \"gamma\"               \"lambdaStar\"         \n [7] \"marksMean\"           \"marksNugget\"         \"n_U\"                \n[10] \"n_Xprime\"            \"sumLatentMarks\"      \"varianceLatentMarks\"\n[13] \"allMarksSum\"         \"allMarksVariance\"   \n",
        "Browse[2]> ",
        "colnames(chains)",
        " [1] \"beta_0\"         \"beta_1\"         \"delta_0\"        \"delta_1\"        \"gamma\"         \n [6] \"lambdaStar\"     \"marksMean\"      \"marksNugget\"    \"n_U\"            \"n_Xprime\"      \n[11] \"sumLatentMarks\"\n",
        "Browse[2]> ",
        "",
        "Error in array(chains, dim = c(iterations, nchains, npar), dimnames = list(iterations = NULL,  : \n  length of 'dimnames' [3] not equal to array extent\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(pompp)",
        "> ",
        "bayesplot::mcmc_trace(fit)",
        "> ",
        "bayesplot::mcmc_dens(fit)",
        "> ",
        "as.data.frame(fit)",
        "        beta_0     beta_1   delta_0   delta_1    gamma lambdaStar   marksMean marksNugget\nC1I1  3.853911  1.2868407 -6.417283 0.2879452 3.856231   303.2487  2.60570572   0.7787828\nC1I2  4.028474  1.3534739 -6.798680 0.3703581 3.805423   381.1413  2.67598925   0.9242794\nC1I3  3.970366  1.3003806 -8.306618 0.3358137 4.436900   435.9636  2.74394475   0.9182748\nC1I4  3.851504  1.3160189 -7.990302 0.3388239 4.120288   440.9724  2.72043382   0.7383781\nC1I5  4.580562  1.5993536 -7.971768 0.4195856 4.216974   455.4003",
        "  2.73065243   0.6326005\nC1I6  4.844125  1.6657598 -8.332342 0.3267165 4.079566   510.7584  2.75733629   0.6054938\nC1I7  4.914399  1.7538595 -8.141399 0.5401139 4.392999   495.4640  2.70072396   0.6032769\nC1I8  5.195619  1.8279848 -8.298643 0.6294086 4.558888   542.6369  2.68645798   0.6093175\nC1I9  5.451177  1.9402363 -8.537431 0.4736421 4.920734   568.5320  2.68724689   0.5877297\nC1I10 5.270102  1.9076092 -7.888948 0.3656882 4.254877   560.0396  2.82342374   0.5298223\nC1I11 5.344651  1.9998624 -7.794921 0.2648483",
        " 4.714008   580.5485  2.86384399   0.5155074\nC1I12 5.495440  2.0666958 -7.556580 0.4316357 4.641649   661.4582  2.84832051   0.5133522\nC1I13 5.424545  2.0531535 -7.783870 0.6029179 4.648912   679.7902  2.86868608   0.4591624\nC1I14 5.258900  1.9562858 -7.355501 0.8595814 4.551513   743.9608  2.94115325   0.4274788\nC1I15 5.339605  1.9026705 -7.839738 1.0380949 5.142031   725.6070  2.96799083   0.3877555\nC1I16 5.396075  1.8952281 -7.794062 0.9685829 5.036712   790.0433  2.94855295   0.3661214\nC1I17 4.839706  1.7188249",
        " -8.059717 0.8687397 5.156200   894.4705  2.97591798   0.3099935\nC1I18 5.117184  1.8160856 -7.798557 0.8341476 4.879614   897.8656  3.02410266   0.2843094\nC1I19 5.305339  1.9250177 -7.335655 0.7072068 5.059201   904.6312  3.02145216   0.2436756\nC1I20 5.076156  1.8636375 -7.234572 0.5468937 5.592267   932.1215  3.05440026   0.2503212\nC2I1  4.647928 -0.5634778 -4.475543 0.4038128 1.751792   245.3804 -0.23540410   0.4487024\nC2I2  5.366703 -0.5891997 -4.358589 0.2029884 1.756703   271.1290 -0.18628271   0.3896095",
        "\nC2I3  5.443744 -0.5473932 -4.447796 0.1636390 1.745721   379.3182 -0.25814678   0.4026304\nC2I4  5.544364 -0.4724348 -4.031701 0.1867742 1.896858   384.7587 -0.20259083   0.3652305\nC2I5  5.060170 -0.6723171 -4.443226 0.2758172 1.884681   409.6341 -0.25076042   0.3428434\nC2I6  4.645330 -0.7820140 -4.382893 0.3507712 1.808600   467.6451 -0.20973198   0.3497546\nC2I7  4.436381 -0.8640979 -4.635334 0.4519623 1.790283   482.9103 -0.17469889   0.4275063\nC2I8  4.532659 -0.9068588 -4.875202 0.4663230 1.931710   495.8633",
        " -0.21719257   0.3592921\nC2I9  4.441808 -1.0640283 -5.302049 0.3188098 2.251661   524.7156 -0.18895195   0.3606305\nC2I10 4.361082 -0.9047536 -5.379030 0.2650887 2.340737   519.5499 -0.20033330   0.3574504\nC2I11 4.715059 -0.7296198 -5.260816 0.2577704 2.644652   580.1480 -0.17677452   0.3700376\nC2I12 4.118730 -1.0243179 -5.096617 0.2653310 2.540102   604.4875 -0.13182854   0.3853165\nC2I13 4.102917 -1.0853982 -4.860623 0.5283360 2.338915   629.0083 -0.16329283   0.4086533\nC2I14 4.098536 -1.0390532 -5.375137 0.4052114",
        " 2.310467   666.3643 -0.12679793   0.4001834\nC2I15 4.292878 -0.9456702 -5.301725 0.5856989 2.299738   745.2518 -0.07813450   0.3631273\nC2I16 4.378561 -1.1318644 -5.659156 0.4582960 2.502856   751.9535 -0.08593506   0.3625494\nC2I17 4.390671 -1.2198299 -5.455634 0.3493789 2.411662   754.7682 -0.05056101   0.3458241\nC2I18 4.241723 -1.3266242 -5.520048 0.4727040 2.790546   795.1242 -0.07599436   0.3220277\nC2I19 3.799867 -1.4875778 -5.874073 0.4174144 2.854837   858.2613 -0.10680939   0.3526191\nC2I20 3.403143 -1.6233689",
        " -6.050689 0.3356139 2.845111   808.3511 -0.11195221   0.3772047\n      n_U n_Xprime sumLatentMarks varianceLatentMarks chain iteration\nC1I1   65      176      6203.9774         7018.327276     1         1\nC1I2   87      243      8268.9615         2397.068644     1         2\nC1I3  118      263     11427.2479         3432.737419     1         3\nC1I4  105      293      8771.7363         1718.630130     1         4\nC1I5  113      319      7519.2183          753.096660     1         5\nC1I6  125      331      9224.0392",
        "         1258.055017     1         6\nC1I7  115      350     10689.0458         1122.566395     1         7\nC1I8  126      383      9433.6695          639.383909     1         8\nC1I9  145      399     10935.2459         1023.674993     1         9\nC1I10 143      397     12402.2949         1702.875853     1        10\nC1I11 165      388     10424.0909          939.407161     1        11\nC1I12 175      419     11570.6743         1643.878898     1        12\nC1I13 211      471     12599.3349          770.768273     1",
        "        13\nC1I14 201      471     14059.1686         1065.744649     1        14\nC1I15 185      524     15356.7382         1254.450619     1        15\nC1I16 202      537     13240.7621          714.084749     1        16\nC1I17 223      591     15249.6783          746.486514     1        17\nC1I18 229      635     16929.4790          458.030271     1        18\nC1I19 248      640     18458.6271          655.860313     1        19\nC1I20 247      626     18212.0956          537.879512     1        20\nC2I1    1      186",
        "       274.8762            2.606929     2         1\nC2I2    0      226       308.7044            1.980673     2         2\nC2I3    1      300       365.8151            1.187068     2         3\nC2I4    1      370       402.7790            1.114278     2         4\nC2I5    0      370       488.1880            1.056512     2         5\nC2I6    1      392       426.3681            1.366882     2         6\nC2I7    0      470       635.9281            1.626989     2         7\nC2I8    1      468       664.9449            2.176333",
        "     2         8\nC2I9    5      462       596.4779            1.444663     2         9\nC2I10   2      466       650.6057            1.784500     2        10\nC2I11   1      497       588.6561            1.208401     2        11\nC2I12   1      577       788.2408            1.439728     2        12\nC2I13   1      613       977.3775            2.846774     2        13\nC2I14   1      658       918.6143            1.678928     2        14\nC2I15   1      699       907.6394            1.556057     2        15\nC2I16",
        "   2      760      1157.1015            2.119269     2        16\nC2I17   3      718      1056.2106            1.990924     2        17\nC2I18   5      733      1037.7001            1.497705     2        18\nC2I19   4      796      1127.3205            1.404211     2        19\nC2I20   3      803      1217.0511            2.170953     2        20\n",
        "> ",
        "names(as.data.frame(fit))",
        " [1] \"beta_0\"              \"beta_1\"              \"delta_0\"            \n [4] \"delta_1\"             \"gamma\"               \"lambdaStar\"         \n [7] \"marksMean\"           \"marksNugget\"         \"n_U\"                \n[10] \"n_Xprime\"            \"sumLatentMarks\"      \"varianceLatentMarks\"\n[13] \"chain\"               \"iteration\"          \n",
        "> ",
        "colnames(as.matrix(fit))",
        " [1] \"beta_0\"              \"beta_1\"              \"delta_0\"            \n [4] \"delta_1\"             \"gamma\"               \"lambdaStar\"         \n [7] \"marksMean\"           \"marksNugget\"         \"n_U\"                \n[10] \"n_Xprime\"            \"sumLatentMarks\"      \"varianceLatentMarks\"\n[13] \"chain\"               \"iteration\"          \n",
        "> ",
        "roxygen2::roxygenise()",
        "\u001B[38;5;232m\u001B[36mℹ\u001B[38;5;232m Loading \u001B[34mpompp\u001B[38;5;232m\u001B[39m\n\u001B[38;5;232mWriting \u001B[34mfit_pompp.Rd\u001B[38;5;232m\u001B[39m\n\u001B[38;5;232mWriting \u001B[34mcheckFormatBackground.Rd\u001B[38;5;232m\u001B[39m\n",
        "> ",
        "roxygen2::roxygenise()",
        "\u001B[38;5;232m\u001B[36mℹ\u001B[38;5;232m Loading \u001B[34mpompp\u001B[38;5;232m\u001B[39m\nExports from /Users/anthorg/Documents/pompp/src/BinaryRegression.cpp:\n\nExports from /Users/anthorg/Documents/pompp/src/GaussianProcess.cpp:\n\nExports from /Users/anthorg/Documents/pompp/src/PresenceOnly.cpp:\n\nExports from /Users/anthorg/Documents/pompp/src/r_wrapper.cpp:\n   List cppPOMPP(Eigen::VectorXd beta, Eigen::VectorXd delta, double lambda, Rcpp::String b_updater, Rcpp::String d_updater, Rcpp::String l_updater, Rcpp::List parB, Rcpp::List",
        " parD, double lambdaA, double lambdaB, Rcpp::String covsClass, SEXP covariates, double areaD, Rcpp::String xClass, double mu, double nugget, double marksMuMu, double marksMuS2, double marksNuggetA, double marksNuggetB, Eigen::MatrixXd xValues, Eigen::VectorXd xMarks, Eigen::MatrixXd xPositions, Eigen::VectorXi intensityCovs, Eigen::VectorXi observabilityCovs, Eigen::VectorXi xIntensityCovs, Eigen::VectorXi xObservabilityCovs, double maxDist, double sigma2, double phi, int neighborhoodSize, int longCol, int ",
        "latCol, int burnin, int thin, int iter, int threads, bool verbose)\n\n/Users/anthorg/Documents/pompp/src/RcppExports.cpp updated.\n/Users/anthorg/Documents/pompp/R/RcppExports.R updated.\n",
        "Re-compiling pompp\n",
        "  \r\u001B[38;5;247m─\u001B[39m\u001B[38;5;247m  \u001B[39m\u001B[38;5;247minstalling *source* package ‘pompp’ ...\u001B[39m\u001B[36m\u001B[36m (543ms)\u001B[36m\u001B[39m\n   ** using staged installation\n\r  \r   ** libs\n\r  \r   clang++ -I\"/Library/Frameworks/R.framework/Resources/include\" -DNDEBUG  -I'/Library/Frameworks/R.framework/Versions/4.2/Resources/library/Rcpp/include' -I'/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include' -I'/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppProgress/include' -I/usr/local/include   -fPIC  -w -std=c++14 -c BinaryRegression.cpp -o BinaryRegression.o",
        "\n\r  \r   clang++ -I\"/Library/Frameworks/R.framework/Resources/include\" -DNDEBUG  -I'/Library/Frameworks/R.framework/Versions/4.2/Resources/library/Rcpp/include' -I'/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include' -I'/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppProgress/include' -I/usr/local/include   -fPIC  -w -std=c++14 -c GaussianProcess.cpp -o GaussianProcess.o\n\r  \r   clang -I\"/Library/Frameworks/R.framework/Resources/include\" -DNDEBUG  -I'/Library/Frameworks/R.framework/Versions/4.2/Resources/library/Rcpp/include' -I'/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include' -I'/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppProgress/include' -I/usr/local/include   -fPIC  -Wall -g -O2  -c PolyaGammaSampler.c -o PolyaGammaSampler.o",
        "\n\r  \r   clang++ -I\"/Library/Frameworks/R.framework/Resources/include\" -DNDEBUG  -I'/Library/Frameworks/R.framework/Versions/4.2/Resources/library/Rcpp/include' -I'/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include' -I'/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppProgress/include' -I/usr/local/include   -fPIC  -w -std=c++14 -c PresenceOnly.cpp -o PresenceOnly.o\n\r  \r   clang++ -I\"/Library/Frameworks/R.framework/Resources/include\" -DNDEBUG  -I'/Library/Frameworks/R.framework/Versions/4.2/Resources/library/Rcpp/include' -I'/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include' -I'/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppProgress/include' -I/usr/local/include   -fPIC  -w -std=c++14 -c RcppExports.cpp -o RcppExports.o",
        "\n\r  \r   clang++ -I\"/Library/Frameworks/R.framework/Resources/include\" -DNDEBUG  -I'/Library/Frameworks/R.framework/Versions/4.2/Resources/library/Rcpp/include' -I'/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include' -I'/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppProgress/include' -I/usr/local/include   -fPIC  -w -std=c++14 -c RegressionPrior.cpp -o RegressionPrior.o\n\r  \r   clang++ -I\"/Library/Frameworks/R.framework/Resources/include\" -DNDEBUG  -I'/Library/Frameworks/R.framework/Versions/4.2/Resources/library/Rcpp/include' -I'/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppEigen/include' -I'/Library/Frameworks/R.framework/Versions/4.2/Resources/library/RcppProgress/include' -I/usr/local/include   -fPIC  -w -std=c++14 -c r_wrapper.cpp -o r_wrapper.o",
        "\n\r  \r   clang++ -dynamiclib -Wl,-headerpad_max_install_names -undefined dynamic_lookup -single_module -multiply_defined suppress -L/Library/Frameworks/R.framework/Resources/lib -L/usr/local/lib -o pompp.so BinaryRegression.o GaussianProcess.o PolyaGammaSampler.o PresenceOnly.o RcppExports.o RegressionPrior.o r_wrapper.o -F/Library/Frameworks/R.framework/.. -framework R -Wl,-framework -Wl,CoreFoundation\n\r  \r   installing to /private/var/folders/wl/z6wn8y4x3qv_rf42zd_g8l4m0000gn/T/RtmpmSbdNS/devtools_install_2492552ab2dd/00LOCK-pompp/00new/pompp/libs",
        "\n\r  \r   ** checking absolute paths in shared objects and dynamic libraries\n\r  \r\u001B[38;5;247m─\u001B[39m\u001B[38;5;247m  \u001B[39m\u001B[38;5;247mDONE (pompp)\u001B[39m\u001B[36m\u001B[39m\n\r",
        "> ",
        "roxygen2::roxygenise()",
        "\u001B[38;5;232m\u001B[36mℹ\u001B[38;5;232m Loading \u001B[34mpompp\u001B[38;5;232m\u001B[39m\n\u001B[38;5;232mWriting \u001B[34mfit_pompp.Rd\u001B[38;5;232m\u001B[39m\n\nRestarting R session...\n\n"
    ]
}